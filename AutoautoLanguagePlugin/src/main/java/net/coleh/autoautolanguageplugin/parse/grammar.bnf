{
  parserClass="net.coleh.autoautolanguageplugin.parse.AutoautoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Autoauto"
  psiImplClassSuffix="Impl"
  psiPackage="net.coleh.autoautolanguageplugin.parse"
  psiImplPackage="net.coleh.autoautolanguageplugin.parse.impl"

  elementTypeHolderClass="net.coleh.autoautolanguageplugin.parse.AutoautoTypes"
  elementTypeClass="net.coleh.autoautolanguageplugin.parse.AutoautoElementType"
  tokenTypeClass="net.coleh.autoautolanguageplugin.parse.AutoautoTokenType"

  psiImplUtilClass="net.coleh.autoautolanguageplugin.parse.AutoautoPsiUtilImpl"
}

autoautoFile ::=  commentOpportunity* [frontMatter] commentOpportunity* labeledStatepath* commentOpportunity*

frontMatter ::= DOLLAR_SIGN commentOpportunity* (frontMatterKeyValue COMMA)* frontMatterKeyValue commentOpportunity* DOLLAR_SIGN

frontMatterKeyValue ::= IDENTIFIER COLON commentOpportunity* value commentOpportunity*

commentOpportunity ::= comment [WHITESPACE_RANGE]

labeledStatepath ::= commentOpportunity* STATEPATH_LABEL_ID COLON commentOpportunity* statepath commentOpportunity* {methods=[getLabel]}

statepath ::=  commentOpportunity* state (SEMICOLON state)* [SEMICOLON] commentOpportunity*

state ::=  commentOpportunity* statement (COMMA statement)* [COMMA] commentOpportunity*

statement ::= singleStatement | multiStatement

multiStatement ::= commentOpportunity*  OPEN_CURLY_BRACKET statepath CLOSE_CURLY_BRACKET commentOpportunity*

singleStatement ::= commentOpportunity*  (returnStatement|afterStatement|funcDefStatement|functionCallStatement|gotoStatement|ifStatement|letStatement|nextStatement|skipStatement)  commentOpportunity*

afterStatement ::= AFTER unitValue statement

functionCallStatement ::= value

gotoStatement ::= GOTO (IDENTIFIER|dynamicValue)

ifStatement ::= (IF|WHEN) valueInParens statement

funcDefStatement ::= FUNCTION (IDENTIFIER|dynamicValue) functionArgsBody

letStatement ::= LET IDENTIFIER settableTail* commentOpportunity* EQUALS commentOpportunity* value {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[getName setName getNameIdentifier]
}

nextStatement ::= NEXT

skipStatement ::= SKIP NUMERIC_VALUE

returnStatement ::= RETURN value

value ::= commentOpportunity*  (boolean) commentOpportunity*

valueInParens ::= commentOpportunity* OPEN_PAREN value CLOSE_PAREN commentOpportunity*

functionArgsBody ::= OPEN_PAREN [argumentList] CLOSE_PAREN statement

modulo ::= baseExpression [MODULUS baseExpression]
exponent ::= modulo [EXPONENTIATE modulo]
product ::= exponent [((MULTIPLY | DIVIDE) exponent)+]
sum ::= product [((PLUS | MINUS) product)+]
arithmeticValue ::= sum

atom ::= commentOpportunity*  (arrayLiteral | NUMERIC_VALUE | stringLiteral | unitValue | variableReference | valueInParens | booleanLiteral | functionExpression) commentOpportunity*


baseExpression ::= atom tail*

settableTail ::= propertyGetTail | arrayElementGetTail
tail ::= functionCallTail | settableTail

propertyGetTail ::= DOT variableReference
functionCallTail ::= OPEN_PAREN [argumentList] CLOSE_PAREN
arrayElementGetTail ::= OPEN_SQUARE_BRACKET value CLOSE_SQUARE_BRACKET

variableReference ::= IDENTIFIER {methods=[getBaseExpressionType getReference getName setName getReferences]}

functionExpression ::= FUNC functionArgsBody

arrayLiteral ::= OPEN_SQUARE_BRACKET [argumentList] CLOSE_SQUARE_BRACKET

booleanLiteral ::= TRUE | FALSE

boolean ::= (arithmeticValue comparisonOperator arithmeticValue) | arithmeticValue

comparisonOperator ::= COMPARE_LT | COMPARE_LTE | COMPARE_EQ | COMPARE_NEQ | COMPARE_GTE | COMPARE_GT

stringLiteral ::= QUOTE NON_QUOTE_CHARACTER* QUOTE

unitValue ::= NUMERIC_VALUE_WITH_UNIT

comment ::= blockComment | lineComment

blockComment ::= COMMENT_BEGIN COMMENT_TEXT* COMMENT_END

lineComment ::= LINE_COMMENT_BEGIN COMMENT_TEXT* LINE_COMMENT_END

argumentList ::= (argument COMMA)* argument

argument ::= [value EQUALS] value

dynamicValue ::= OPEN_SQUARE_BRACKET value CLOSE_SQUARE_BRACKET
